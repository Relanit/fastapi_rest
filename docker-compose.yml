services:
  db:
    image: postgres:17
    container_name: db_fastapi_rest
    command: -p 2222
    ports:
      - "2222:2222"
    env_file:
      - .env.prod
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h db -p 2222" ]
      interval: 2s
      timeout: 5s
      retries: 5


  test_db:
    image: postgres:17
    container_name: test_db_fastapi_rest
    command: -p 5433
    env_file:
      - .env.test

  redis:
    image: redis:7
    container_name: redis_fastapi_rest
    command: --port 5370
    ports:
      - "5370:5370"
    volumes:
      - redis_data:/data

  app:
    build:
      context: .
    environment:
      - DOCKER_ENV=true
      - HTTP_PROXY=http://host.docker.internal:10808
      - HTTPS_PROXY=http://host.docker.internal:10808
      - NO_PROXY=localhost,127.0.0.1,db,redis
    env_file:
      - .env.prod
    container_name: fastapi_rest
    command: ["/fastapi_rest/docker/app.sh"]
    ports:
      - "9999:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/fastapi_rest

  celery_worker:
    build:
      context: .
    container_name: celery_worker_fastapi
    command: ["celery", "-A", "tasks", "worker", "-l", "info"]
    working_dir: /fastapi_rest/src
    volumes:
      - .:/fastapi_rest
    environment:
      - HTTP_PROXY=http://host.docker.internal:10808
      - HTTPS_PROXY=http://host.docker.internal:10808
      - NO_PROXY=localhost,127.0.0.1,db,redis
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  celery_beat:
    build:
      context: .
    container_name: celery_beat_fastapi
    command: ["celery", "-A", "tasks", "beat", "-l", "info"]
    working_dir: /fastapi_rest/src
    volumes:
      - .:/fastapi_rest
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

volumes:
  pg_data:
  redis_data: